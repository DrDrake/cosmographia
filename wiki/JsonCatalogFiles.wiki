#summary A description of the JSON catalog file format for Cosmographia

= Introduction =

Cosmographia's native catalog files are stored in JSON (JavaScript Object Notation.) The very simple syntax of JSON is described at http://www.json.org/

= Example =

Here's a complete catalog file containing a single object.

{{{
{
     "version": "1.0",
     "name": "Cassini Solstice Mission",

     "items" :
     [
      	{
          "name" : "Cassini",
          "center" : "Saturn",
          "trajectoryFrame" : "EclipticJ2000",
          "trajectory" :
          {
              "type" : "InterpolatedStates",
              "source" : "cassini-solstice.xyzv"
          },
          "geometry" :
          {
              "type" : "Mesh",
              "size" : "5m",
              "source" : "models/cassini.obj"
          }
        }
    ]
}
}}}

= Units =

Many numeric properties can be written as strings with a unit suffix. The default units are assumed when the suffix is omitted (such as when the value of the property as a floating point literal.)

Examples:

{{{
    semiMajorAxis : 1.52098e8
    semiMajorAxis : "1.52098e8 km"
    semiMajorAxis : "1 au"
}}}

= Catalog File Properties =

 * version - version number of the catalog file (always 1.0 for now)
 * name - name of the catalog
 * items - an array of catalog file objects (for now, bodies and visualizers)

= Body properties =

A body is identified by setting the value of type to "body"; this is the value assumed when the type isn't listed, so it may be omitted.

 * name
 * center - name of the center object; the position of the body is defined relative to the center object
 * trajectoryFrame - reference frame for position
 * bodyFrame - reference frame for orientation
 * trajectory - describes the position of the object over time
 * rotationModel - describes the orientation of the object over time

*Note:* The center, frames, trajectory, and rotation model collectively comprise an _arc_. The catalog file format will soon be updated to support multiple arcs for a body.

= Geometry types =

== Mesh ==

{{{
 "geometry" :
{
     "type" : "Mesh",
      "size" : "4.2 km",
      "source" : "models/asteroid.3ds"
}
}}}

The size of the mesh can be specified in two ways. If the _size_ property is present, the mesh will be scaled to fit into a sphere of that radius. Otherwise, the size of the mesh is determined by the coordinates of the vertices in the mesh file. If the _scale_ property is present, the mesh's coordinates will be scaled by that factor. If the units of the mesh file are meters, the value of _scale_ should be 0.001.

== Globe ==

{{{
"geometry" :
{
    "type" : "Globe",
    "radius" : 3389,
    "baseMap" : "textures/mars.jpg"
}
}}}

== Axes ==

== Sensor ==

= Trajectory Types =

== Fixed Point ==

{{{
"trajectory" :
{
    "type" : "FixedPoint",
    "position" : [ 0.1 0.2 0.3 ]
}
}}}

== Keplerian ==

== Builtin ==

{{{
"trajectory" :
{
    "type" : "Builtin",
    "name" : "Mars"
}
}}}

== Interpolated States ==

{{{
"trajectory" :
{
    "type" : "InterpolatedStates",
    "source" : "cassini-solstice.xyzv"
}
}}}

== TLE ==

{{{
"trajectory" :
{
    "type" : "TLE",
    "name" : "ISS (ZARYA)",
    "line1" : "1 25544U 98067A   11042.40620627  .00065760  00000-0  48638-3 0  8024",
    "line2" : "2 25544  51.6440  85.8998 0004217 288.1282 194.3117 15.72311137701100",
     "source" : "http://celestrak.com/NORAD/elements/visual.txt"
}
}}}

= Rotation Model Types =

== Fixed ==

== Builtin ==

== Uniform ==

== Interpolated ==

{{{
"rotationModel" :
{
    "type" : "Interpolated",
    "source" : "attitude.q"
}
}}}

 * source - name of a file containing a list of time-tagged quaternions representing orientations
 * compatibility - if set to the string "celestia", the quaternions are converted to Celestia's conventions for orientation.

= Frame Types =

== Inertial ==

Built-in inertial frames are specified by providing the name of the frame:
{{{
"trajectoryFrame" : "EclipticJ2000"
}}}

The available inertial frames are:
 * ICRF (the default)
 * EquatorJ2000 (commonly called EME2000 elsewhere)
 * EclipticJ2000
 * EquatorB1950

== BodyFixed ==

{{{
"bodyFrame" :
{
    "type" : "BodyFixed",
    "body" : "CubeSat"
}
}}}

== TwoVector ==

{{{
"bodyFrame" :
{
    "type" : "TwoVector",
    "primaryAxis" : "x",
    "primary" :
    {
        "type" : "RelativePosition",
        "observer" : "CubeSat",
        "target" : "Ceres"
    },
    "secondaryAxis" : "-y",
    "secondary" :
    {
        "type" : "RelativeVelocity",
        "observer" : "CubeSat",
        "target" : "Ceres"
    }
}
}}}

= Label Properties =

* color - the color of the label (defaults to white)

Example:
{{{
"label" :
{
    "color" : "#ff0000"
}
}}}}

= Trajectory Plot Properties =

It is possible to control the appearance of the plot of a body's trajectory.

* color - the color of the plot (defaults to the label color)
* duration - time window over which to plot the trajectory (in units of days)
* lead - amount of time ahead of the current time to start the plot (units of days, defaults to zero)
* fade - a value between 0 and 100 giving the fraction of the orbit over which the fade from opaqe to transparent occurs; defaults to 0, indicating no fading

Example:
{{{
"trajectoryPlot" :
{
    "color" : "#00ff00",
    "duration" : 0.5,
    "fade" : 0.5,
     "lead" : 0.1
}
}}}